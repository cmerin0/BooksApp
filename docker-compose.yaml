version: '3.8'

services:
  flaskapp:
    build: .
    image: flask-app
    container_name: book_app
    env_file:
      - ".env.prod"
    expose:
      - "5000"
    networks:
      - backend-net
    depends_on:
      postgres:
        condition: service_healthy
    command: ["gunicorn", "--workers", "4", "--bind", "0.0.0.0:5000", "wsgi:app"]
    restart: unless-stopped

  nodeapp:
    build: ./backup_server/
    image: node-app
    container_name: book_app_backup
    env_file:
      - ./backup_server/.env
    expose:
      - "3000"
    networks:
      - backend-net
    depends_on:
      postgres:
        condition: service_healthy
    command: ["npm", "start"]
    restart: unless-stopped

  postgres:
    image: postgres:alpine
    container_name: book_db
    environment:
      - POSTGRES_DB=books_db
      - POSTGRES_USER=bookuser
      - POSTGRES_PASSWORD=bookpass
    expose:
      - "5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bookuser -d books_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-net
    restart: always

  redis:
    image: redis:alpine
    container_name: book_cache
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    networks:
      - backend-net
    restart: always

  nginx:
    image: nginx
    container_name: book_proxy
    ports:
      - "444:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/certs/:/etc/nginx/certs/
    depends_on:
      - flaskapp
      - nodeapp
    networks:
      - backend-net
    restart: unless-stopped

volumes:
  pg_data:
  redis_data:

networks:
  backend-net:
    name: backend-net
    driver: bridge